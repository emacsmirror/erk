#+title: Elisp Repo Kit (ERK)
#+export_file_name: ../README.md

#+options: toc:nil broken-links:nil num:nil

#+begin_export html
<!-- !!!THIS FILE HAS BEEN GENERATED!!! Edit README.org -->
#+end_export

#+begin_export html
<a href="https://melpa.org/#/erk"><img src="https://melpa.org/packages/erk-badge.svg" alt="melpa package"></a> <a href="https://stable.melpa.org/#/erk"><img src="https://stable.melpa.org/packages/erk-badge.svg" alt="melpa stable package"></a>
<a href="https://github.com/positron-solutions/elisp-repo-kit/actions/?workflow=CI"><img src="https://github.com/positron-solutions/elisp-repo-kit/actions/workflows/ci.yml/badge.svg" alt="CI workflow status"></a>
<a href="https://github.com/positron-solutions/elisp-repo-kit/actions/?workflow=Developer+Certificate+of+Origin"><img src="https://github.com/positron-solutions/elisp-repo-kit/actions/workflows/dco.yml/badge.svg" alt="DCO Check"></a>
#+end_export

* Elisp Repo Kit
  :PROPERTIES:
  :UNNUMBERED: notoc
  :END:

This repository is a kit to start a new elisp package repository on GitHub.  The
package contained has commands to streamline elisp development.

* Quickly set up an Emacs Lisp repository on GitHub with:
  :PROPERTIES:
  :UNNUMBERED: notoc
  :END:

- An [[https://www.youtube.com/watch?v=RQK_DaaX34Q&list=PLEoMzSkcN8oPQtn7FQEF3D7sroZbXuPZ7][elisp]] package
- CI with [[https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs][GitHub Actions]], configured for Darwin (MacOS) and Linux
- Built-in Emacs info manual generation
- [[https://nixos.org/#examples][Nix]] environment for obtaining dependencies or reproducibly developing CI
  locally
- Licensing, [[https://developercertificate.org/][DCO]], DCO sign-off checks, PR template and [[file:./CONTRIBUTING.md][CONTRIBUTING]] instructions
- [[https://github.com/melpa/melpa][MELPA]] publishing compatible

*To get started:*

Install the package and run =erk-new=, provide a directory, and
answer all the questions.

* Install ERK
  :PROPERTIES:
  :UNNUMBERED: notoc
  :END:
#+include: "manual.org::*Install ERK" :only-contents t
#+toc: headlines 2
#+include: "manual.org::*Creating Packages" :minlevel 1
#+include: "manual.org::*Using ERK for development" :minlevel 1
#+include: "manual.org::*File contents and structure" :minlevel 1
#+include: "manual.org::*Setting Up Your Github Repository"
#+include: "manual.org::*Customizing CI" :minlevel 1
#+include: "manual.org::*Licensing, Developer Certificate of Origin" :minlevel 1
#+include: "manual.org::*Publishing to MELPA" :minlevel 1
#+include: "manual.org::*Maintaining versions" :minlevel 1

* Package scope and relation to other work

  There are two functional goals of this repository:

  - Automate the annoying work necessary to set up a new repository
  - Streamline common elisp development workflows

  Commands within this package will focus on cleaner integration of the tests
  and lints with Emacs.  There has been a lot of work in this area, but much of
  it is tangled with dependency management and sandbox creation.  Much of it is
  done in languages other than elisp and focused on non-interactive workflows
  with no interactive integration on top.

  Providing close to out-of-box CI is a big focus.  By making it easier to
  qualify changes from other users, it becomes less burdonsome to maintain
  software, and by extension, less burdensom to publish and create software. The
  effect is to drive creation of elisp in a way that can accelerate the flow of
  elisp into Emacs itself.

** Dependency Management

   This repository uses pure dependency management and then leverages it to
   provide dependencies for development and CI environments.  The resulting user
   experience is built around CI for reproducibility and interactive testing for
   development speed.

   Because most elisp dependencies can be obtained without extensive system
   dependency management, many tools for testing Emacs packages provide
   dependency management and loading those dependencies into a fresh Emacs
   instance.  This aligns well with ad-hoc sandboxed local testing.  This was
   fine in the old days of impure dependency management and dirty environments.

   The [[https://github.com/nix-community/emacs-overlay][Emacs Nix Overlay]] and Emacs support within nixpkgs make it possible to
   stating and obtaining elisp dependencies in a completely pure way.  Non-elisp
   dependencies are trivially provided form nixpkgs.  Nix is extremely reliable
   at dependency management, and it is no surprise that much complexity is
   normalized away by just the basic behavior model of Nix.  In addition, *if
   your project needs or includes additional binary dependencies or modules*,
   Nix is an excellent way to provide them to CI and users.

** Discovering and Running Tests & Lints

   During development, the commands provided under the =erk-= prefix make it
   more convenient to reload your package and test features.  You can run the
   ert tests for a project while working on multiple packages.

   During CI, this repository uses an elisp shim for discovering and running
   tests.  The commands within the package for convenience during development
   are not depeneded upon during CI.

   The CI actions obtain an environment with dependencies using Nix, so this can
   also be done locally using Nix, meaning re-creating environments is available
   to the user without leaning on CI.

** Comparisons
   There are many tools for running Elisp tests.  Most of them are well
   integrated with some dependency management.  Most of them have some published
   CI integrations to draw inspiration from.  These patterns are common because
   the needs arise together.
*** ERK's Key Characteristics

   - Quickly spin up nearly complete starter projects
   - Fully working CI, packaging, and documentation manual scheme
   - Immediately run tests and get into the virtuous feedback loop
   - Nix dependency management, bringing both Elisp and 3rd party dependencies
     under full control
   
   As a template for your project, *ERK leans towards being opinionated* in
   order to provide complete behavior out of the box.  The trade-off of being
   closer to a completed project while still being minimal is only supporting
   one hosting platform, *Github, and its Github Actions CI infrastructure.* You
   can adapt around this easily because it's not a complex project, but you will
   do it on your own.

   This project favors the *Nix dependency tooling* for extreme reproducibility
   and access to a *huge* number of 3rd party dependencies on most platforms.
   If you want to implement sandboxed tests or test with a specific version of
   dependencies, you can do it in a pollution-free way across numerous versions
   with Nix.  Everyone on most platforms can reproduce your work in a way that
   doesn't pollute their system either (beyond installing Nix).

*** Other Comparisons
   
    There are many comparisons available to understand the roles of similar tools
    and how they relate to each other.

    - [[https://github.com/alphapapa/makem.sh#comparisons][makem.sh]]
    - [[https://github.com/doublep/eldev#see-also][Eldev]]
    - [[https://github.com/emacs-twist/nomake][nomake]] Is another project with Nix work

    [[https://github.com/purcell/nix-emacs-ci][nix-emacs-ci]] capture the work needed to provide a running Emacs to CI.  Tools
    like [[https://github.com/doublep/eldev#continuous-integration][eldev]] and [[https://github.com/alphapapa/makem.sh/blob/master/test.yml][makem.sh]] have support for providing dependencies to that Emacs.
    The Nix flake [[file:./.github/flake.nix][in this project]] describes both of these tasks.  Makem and Eldev
    etc document Gihub workflows, but *the workflows in this repository are meant to
    be used out-of-the-box after cloning*, although to be fair, there's more
    decisions than actual work.

    Nix-emacs-ci provides a lot of backwards-compatibility versions of Emacs.
    The emacs-nix-overlay that this project employs is more forward looking,
    providing =emacsGit= and sometimes other upstream branches when a big
    feature like native compilation is in the pipeline.  Nix-emacs-ci is also
    still using legacy Nix, without flakes.  Flakes are just nicer and the way
    Nix is going.

* Contributing

  For turn-key contribution to the software ecosystem that keeps you moving, see
  the [[https://github.com/sponsors/positron-solutions][funding links]].

  For code-based contribution, first decide if you want to work on this
  repository or fork it to something entirely different.

  The [[file:./CONTRIBUTING.md][CONTRIBUTING]] guide in this repo contains development instructions,
  including singing & sign-off configuration.  You will usually want this file
  in your own repositories.

  Non-exhaustive list of changes that are very welcome:

  - More interactive integrations with high-value elisp development workflows
  - Running additional or better kinds of tests & lints
  - Fix bugs
  - More generic support for renaming and selecting different base repository
    templates
  - Expose trivial options where a structural choice has limited them
    unnecessarily
  - Behave the same, but with a less complicated code
  - Guix or other pure dependency management support

  Changes will likely be rejected if it is aimed at:

  - Non-elisp interfaces meant for invocation outside of Emacs or with scripting
    implemented in a language besides elisp.
  - Managing dependencies outside of Nix (or other pure dependency management)
    expressions
  - CI infrastructure support for non-Actions infrastructure (which cannot be
    tested in this repo)
  - Backwards compatibility for Emacs two versions behind next release.  Master,
    current stable release, and release - 1 are the only versions being supported
  - pre-flake Nix support
  - Guix support *if it interferes with Nix support*

* Footnote on FSF and Emacs Core Licensing

  Free Software Foundation (FSF) frequently requires copyright assignment on all
  code that goes into Emacs core. Many free software projects formerly requiring
  copyright assignment have since switched to using a Developer Certificate of
  Origin.  DCO sign-off is a practice accepted by git, GCC, and the [[https://wiki.linuxfoundation.org/dco][Linux
  Kernel]].

  Doing DCO sign-off is not the same as copyright assignment, and serves a
  slightly different purpose.  DCO sign-off is an attestation from the submitter
  stating that they have sufficient direct or transitive authority make their
  submission under the terms of the license of the recieving project.  Copyright
  assignment serves a more offensive role in the case of GPL non-compliance,
  giving FSF alone legal standing.  If you don't care about FSF being able to
  sue people, the DCO should suffice.

  Using the DCO *may* make it easier for code in your project to be included in
  Emacs core later.  *It is the intent of this choice to steer FSF towards
  DCO-like solutions in order to accelerate code flow into Emacs.* Regardless of
  FSF's ongoing position on use of DCO's, by requiring DCO sign-off and GPG
  signature, you can be assured that changes submitted to a code base you
  control are strongly attested to be covered by the license you chose.
  
* Shout-outs

  - [[https://github.com/alphapapa][alphapapa]] for being super prolific at everything, including package writing,
    documentation, and activity on various social platforms
  - [[https://github.com/adisbladis][adisbladis]] for the Nix overlay that makes the CI and local development so nice
  - [[https://github.com/NobbZ][NobbZ]] for being all over the Nix & Emacs interwebs
  - [[https://www.fsf.org/][FSF]] and all contributors to Emacs & packages for the Yak shaving club

# Local Variables:
# after-save-hook: (lambda () (when (require 'erk nil t) (erk-export-readme)))
# End:
